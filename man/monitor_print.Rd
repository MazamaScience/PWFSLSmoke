% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/monitor_print.R
\name{monitor_print}
\alias{monitor_print}
\title{Print monitor data as CSV}
\usage{
monitor_print(
  ws_monitor,
  saveFile = NULL,
  metaOnly = FALSE,
  dataOnly = FALSE,
  quietly = FALSE
)
}
\arguments{
\item{ws_monitor}{\emph{ws_monitor} object}

\item{saveFile}{optional filename where CSV will be written}

\item{metaOnly}{flag specifying whether to return \code{ws_monitor$meta} only
as a machine parseable CSV}

\item{dataOnly}{flag specifying whether to return \code{ws_monitor$data} only
as a machine parseable CSV}

\item{quietly}{do not print to console, just return the string representation
of the CSV}
}
\description{
Prints out the contents of the \code{ws_monitor} object as CSV.
By default, the output is a text string with "human readable" CSV that
includes both \code{meta} and \code{data}. When saved as a file, this format
is useful for point-and-click spreadsheet users who want to have everything
on a single sheet.

To obtain machine parseable CSV strings you can use \code{metaOnly} or
\code{dataOnly} which are mutually exclusive but which return CSV strings
that can be automatically ingested.

By default, the CSV formatted text is printed to the console as well as
returned invisibly but not saved to a file unless \code{saveFile} is
specified.
}
\note{
The \link{monitor_writeCSV} function is an alias for this function but
defaults to \code{quietly = TRUE}.
}
\examples{
data("Carmel_Valley")
Carmel_Valley <- monitor_subset(Carmel_Valley, tlim = c(20160802,20160803))
monitor_print(Carmel_Valley)
monitor_print(Carmel_Valley, metaOnly = TRUE)
monitor_print(Carmel_Valley, dataOnly = TRUE)
}
\keyword{ws_monitor}
